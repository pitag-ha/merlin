name: Fuzzy CI

on:
  # push:
  #   branches: [ fuzzy-ci-artefacts-approach ]
  pull_request:
    branches: [ fuzzy-ci-artefacts-approach ]
    types: [ opened, synchronize, reopened, labeled, unlabeled ]

jobs:
  approve:
    name: Diff has been approved
    if: github.event_name == 'pull_request' && github.event.action == 'labeled' && contains(github.event.pull_request.labels.*.name, 'fuzzy-diff-looks-good')
    runs-on: ubuntu-20.04
    steps:
      - name: Find PR number
        run: echo ${{ github.event.pull_request.number }}
  shas:
    name: Save merge commit and base branch shas
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize' || github.event.action == 'unlabeled')
    runs-on: ubuntu-20.04
    outputs:
      source_branch: ${{ steps.source_branch.outputs.sha }}
      base_branch: ${{ steps.base_branch.outputs.sha }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Save merge commit sha
      id: source_branch
      run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Save base branch sha
      id: base_branch
      run: echo "sha=$(git rev-parse HEAD^1)" >> $GITHUB_OUTPUT

  data:
    name: Generate data
    needs: shas
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        commit: ["source_branch", "base_branch"]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Checking out ${{ matrix.commit }}
      env:
        source_branch: ${{ needs.shas.outputs.source_branch }}
        base_branch: ${{ needs.shas.outputs.base_branch }}
      run: |
        sha=$${{ matrix.commit }}
        echo "sha=$sha" >> $GITHUB_ENV
        echo "Check out $sha"
        git checkout $sha

    # - name: Check if merge was fast-forwarded
    #   if: ${{ matrix.commit == 'merge-commit' }}
    #   run: |
    #     merge_sha=$${{ matrix.commit }}
    #     source=$(git rev-parse $merge_sha^2)
    #     git diff $merge_sha $source

    - name: Create artefact dir
      run: mkdir -p data

    - name: Create data
      run: |
        touch data1.json
        touch data2.json
        echo "whatever ${{matrix.commit}}, run num: ${{ github.run_number }}" > data1.json
        echo "whetever else ${{matrix.commit}}, run num: ${{ github.run_number }}" > data2.json
      working-directory: data

    - name: Upload data
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.sha }}
        path: data

  diff:
    name: Generate diff
    runs-on: ubuntu-20.04
    needs: [shas, data]
    env:
      source_branch: ${{ needs.shas.outputs.source_branch }}
      base_branch: ${{ needs.shas.outputs.base_branch }}
    steps:
      - name: Synch env
        run: |
          echo "source_branch: $source_branch" >> GITHUB.ENV
          echo "target_branch: $target_branch" >> GITHUB.ENV
      - name: Download source branch data
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.source_branch }}
          path: data-${{ env.source_branch }}
      - name: Download base branch data
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.base_branch }}
          path: data-${{ env.base_branch }}
      - name: cat ${{ env.base_branch }}
        run: cat data-${{ env.base_branch }}/data1.json
      - name: cat ${{ env.source_branch }}
        run: cat data-${{ env.source_branch }}/data1.json
      - name: Get diff
        run: diff -U 1 data-$base_branch data-$source_branch



    # - name: log PR target
    #   run: git log remotes/origin/${{ github.base_ref }} -n 3

    # - name: Find common ancestor
    #   run: |
    #     common_ancestor = $(git merge-base ${{ github.ref }} ${{ github.base_ref }})
    #     echo "Common ancestor: $common_ancestor"



#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install OCaml
#         uses: ocaml/setup-ocaml@v2
#         with:
#           # When updating the compiler here, also update the Irmin build on ... to the new compiler
#           ocaml-compiler: ocaml-base-compiler.4.14.1
#           dune-cache: true

#       - name: Install dependencies
#         run: opam install --deps-only .

# # TODO: rebase over master before installing merlin.

#       - name: Install merlin
#         run: |
#           opam exec -- dune subst
#           opam exec -- dune build
#           opam exec -- dune install

#       - name: Install merl-an
#         run: opam pin -y merl-an https://github.com/pitag-ha/merl-an.git

#       - name: Set up ssh env
#         uses: webfactory/ssh-agent@v0.7.0
#         with:
#           ssh-private-key: ${{ secrets.DEPLOY_KEY_FOR_FUZZY_CI }}

#       - name: Clone data repo
#         run: git clone git@github.com:pitag-ha/merlin-fuzzy-ci-data.git data

#       - name: Configure git user
#         run: |
#           git config user.email "actions@github.com>"
#           git config user.name "Merlin Fuzzy CI"
#         working-directory: data

#       - name: Checkout new branch
#         run: |
#           git fetch origin
#           git checkout origin/main
#           git checkout -b yuhuuu
#         working-directory: data

#       - name: Build test code base
#         run: |
#           eval $(opam env)
#           dune build @check
#         working-directory: data/test-code-base/irmin

#       - name: Create new data
#         run: |
#           eval $(opam env)
#           merl-an behavior --queries=type-enclosing,occurrences,locate,complete-prefix,errors --sample-size=30 --data=irmin_data --merlin=ocamlmerlin --project=test-code-base/irmin/src/irmin/
#           # merl-an behavior --queries=type-enclosing,occurrences,locate,complete-prefix,errors --sample-size=30 --data=irmin_pack_data --merlin=ocamlmerlin --project=irmin/src/irmin-pack --extensions=ml
#           # merl-an behavior --queries=type-enclosing,occurrences,locate,complete-prefix,errors --sample-size=30 --data=irmin_pack_test_data --merlin=ocamlmerlin --project=irmin/test/irmin-pack --extensions=ml
#         working-directory: data

#       - name: Commit new data
#         run: |
#           git add irmin_data
#           git commit -m "Updated data from PR ..."
#         working-directory: data

#       - name: Push new data
#         run: git push --set-upstream -f origin yuhuuu
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY_FOR_FUZZY_CI }}
#         working-directory: data

#       - name: Diff new data with old data
#         run: |
#           if [[ -n $(git diff origin/main) ]]; then
#             echo "See diff on https://github.com/pitag-ha/merlin-fuzzy-ci-data/compare/main...yuhuuu"
#             exit 1
#           else
#             echo "All good: No diff on merl-an's sample set."
#           fi
#         working-directory: data
